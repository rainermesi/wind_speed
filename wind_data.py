# -*- coding: utf-8 -*-
"""wind_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSi6BD95ygBPpYz4MzSeFgJQ3eXYWTt1
"""

import pandas as pd
import plotly.express as px
import numpy as np
from tabulate import tabulate

raw_df = pd.read_csv('/content/drive/MyDrive/DATA/Wind data/output.csv')

"""Functions"""

def clean_cols(x):
  df1 = x[x.columns[1:]]
  new_cols = [i.strip() for i in df1.columns]
  df1.columns = new_cols
  df1['DATE_DT'] = pd.to_datetime(df1['DATE'].astype(str), format='%Y%m%d')
  return df1

def clean_colnames(x):
  new_cols = [i.strip() for i in x.columns]
  x.columns = new_cols
  return x

# try
#from IPython.display import Image                 # For displaying images in the notebook
#from IPython.display import display               # For displaying outputs in the notebook

def data_overview(x):
  print('\n')
  print('Data types')
  print(pd.DataFrame(x.dtypes))
  print('\n')
  print('Null values')
  print(pd.DataFrame(x.isnull().sum()))
  print('\n')
  print('Summary statistics')
  print(tabulate(x.describe(),headers='keys',floatfmt=".4f"))

def impute_na(y):
  y['IS_NEG_FG'] = y.apply(lambda x: x.FG < 0, axis=1)
  y['NAN_FG'] = y.apply(lambda x: None if x.FG < 0 else x.FG, axis=1)
  imputed_df = y[['CN','STANAME','NAN_FG']].groupby(by=['CN','STANAME'],as_index=False).mean()
  y = y.merge(imputed_df,how='inner',on=['STANAME'])
  y['CLEAN_FG'] = y.apply(lambda x: x.NAN_FG_y * 0.1 if x.FG < 0 else x.FG * 0.1 , axis=1)
  return y[['STAID','STANAME','DATE_DT','CLEAN_FG','LAT','LON']]

def plot_data(data):
  fig1 = px.line(data,x='DATE_DT',y='CLEAN_FG',color='STANAME')
  fig2 = px.box(data,x='STANAME',y='CLEAN_FG')
  fig1.show()
  fig2.show()

def plot_all_cn(y):
  for i in y['CN'].unique():
    print(i)
    data = y[y['CN'] == i]
    plot_data(impute_na(data))

"""Cleaning

START AWS NOTES
"""

# stuff from aws
# Frequency tables for each categorical feature
for column in data.select_dtypes(include=['object']).columns:
    display(pd.crosstab(index=data[column], columns='% observations', normalize='columns')*100)

# Histograms for each numeric feature
display(data.describe())
display(data.describe(include=np.object))
#%matplotlib inline
hist = data.hist(bins=30, sharey=True, figsize=(10, 10))

# Next, let's look at how our features relate to the target that we are attempting to predict.
for column in data.select_dtypes(include=['object']).columns:
    if column != 'y':
        display(pd.crosstab(index=data[column], columns=data['y'], normalize='columns'))

for column in data.select_dtypes(exclude=['object']).columns:
    print(column)
    hist = data[[column, 'y']].hist(by='y', bins=30)
    plt.show()

# Now let's look at how our features relate to one another.
display(data.corr())
pd.plotting.scatter_matrix(data, figsize=(12, 12))
plt.show()

data['no_previous_contact'] = np.where(data['pdays'] == 999, 1, 0)                                 # Indicator variable to capture when pdays takes a value of 999
data['not_working'] = np.where(np.in1d(data['job'], ['student', 'retired', 'unemployed']), 1, 0)   # Indicator for individuals not actively employed
model_data = pd.get_dummies(data)                                                                  # Convert categorical variables to sets of indicators

"""END NOTES"""

clean_df = clean_cols(raw_df)

stations_df = pd.read_csv('/content/drive/MyDrive/DATA/Wind data/stations.txt',skiprows=17)
stations_df = clean_colnames(stations_df)

merged_df = clean_df.merge(stations_df, how='inner',on='STAID')

#merged_df.to_csv('/content/drive/MyDrive/DATA/Wind data/cleaned_output.csv')

"""Analysis"""

#input_df = pd.read_csv('/content/drive/MyDrive/DATA/Wind data/cleaned_output.csv')
input_df = merged_df
input_df.head()

"""Sample data"""

input_df['CN'].unique()

ee_df = input_df[input_df['CN'] == 'EE']
is_df = input_df[input_df['CN'] == 'IS']
es_df = input_df[input_df['CN'] == 'ES']

ee_df['LON']

data_overview(es_df)

"""Impute missing values"""

ee_plt_df = impute_na(ee_df)
#ee_plt_df.head()
ee_plt_df.to_csv('/content/drive/MyDrive/DATA/Wind data/ee_output.csv')

"""Plot"""

fig1 = px.line(ee_plt_df,x='DATE_DT',y='CLEAN_FG',color='STANAME')
fig1.show()

fig1.write_html("/content/drive/MyDrive/DATA/Wind data/ee_wind.html")

fig2 = px.box(ee_plt_df,x='STANAME',y='CLEAN_FG')
fig2.show()

is_plt_df = impute_na(is_df)

plot_data(is_plt_df)

plot_data(es_plt_df[es_plt_df.DATE_DT.dt.year > 2000])

es_plt_df[es_plt_df.DATE_DT.dt.year > 2020]

fig2 = px.box(es_plt_df[es_plt_df.DATE_DT.dt.year > 2020],x='STANAME',y='CLEAN_FG')
fig2.show()

